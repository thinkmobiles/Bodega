package com.thinkmobiles.bodega.db.daogen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.thinkmobiles.bodega.db.daogen.OrderItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_ITEM".
*/
public class OrderItemDao extends AbstractDao<OrderItem, Long> {

    public static final String TABLENAME = "ORDER_ITEM";

    /**
     * Properties of entity OrderItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Pdf = new Property(2, String.class, "pdf", false, "PDF");
        public final static Property Icon = new Property(3, String.class, "icon", false, "ICON");
        public final static Property CustomerId = new Property(4, long.class, "customerId", false, "CUSTOMER_ID");
    };

    private Query<OrderItem> customer_OrderItemListQuery;

    public OrderItemDao(DaoConfig config) {
        super(config);
    }
    
    public OrderItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"PDF\" TEXT," + // 2: pdf
                "\"ICON\" TEXT," + // 3: icon
                "\"CUSTOMER_ID\" INTEGER NOT NULL );"); // 4: customerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String pdf = entity.getPdf();
        if (pdf != null) {
            stmt.bindString(3, pdf);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(4, icon);
        }
        stmt.bindLong(5, entity.getCustomerId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderItem readEntity(Cursor cursor, int offset) {
        OrderItem entity = new OrderItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pdf
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // icon
            cursor.getLong(offset + 4) // customerId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setPdf(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCustomerId(cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OrderItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrderItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "orderItemList" to-many relationship of Customer. */
    public List<OrderItem> _queryCustomer_OrderItemList(long customerId) {
        synchronized (this) {
            if (customer_OrderItemListQuery == null) {
                QueryBuilder<OrderItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CustomerId.eq(null));
                customer_OrderItemListQuery = queryBuilder.build();
            }
        }
        Query<OrderItem> query = customer_OrderItemListQuery.forCurrentThread();
        query.setParameter(0, customerId);
        return query.list();
    }

}
